/**
1. 为什么要用原型？
  原型上的所有方法和属性都可以被构造函数的实例共享，那为什么要共享呢？有什么好处呢？
  使用原型解决所有实例上的方法，还有所有实例上的共同属性都可以放到原型上去定义
2. 认识函数 + 原型定义
  a. 函数也是一个对象，当真正执行函数是，执行环境会为函数分配一个 函数对象变量空间 + 函数对象空间
  函数对象变量 用函数名表示，存在于栈中
  函数对象空间是在堆中开辟的一个内存空间，这个空间中有一个默认的 prototype 这个 prototype 属性就是一个原型对象属性 - 也叫对象变量
 
  b. 函数和构造函数的区别
  当通过 new 函数()时，此刻这个函数就是构造函数 - 日后后演变成 TS类的构造器
  c. 原型 prototype 是定义函数由js 自动分配给函数的一个可以被所有构造函数实例对象变量共享的对象变量 - 也叫原型属性
3. 如何访问原型对象空间上的属性和方法

  a. 每一个实例都有 __proto__属性，这个 __proto__属性指向原型对象空间
  b. 关于__proto__: new 在创建新对象的时候，会赋予新对象一个属性指向构造函数的 prototype 属性，这个属性就是 __proto__
  c. 可以直接通过构造函数.prototype对象属性来访问原型对象空间上的属性和方法

  思考？创建实例后在覆盖原型，实例对象无法访问到，为什么？
  因为之前的实例的 __proto__ 指向的还是之前的 prototype 并不是我们新创建的原型对象
*/

// let obj = {username:'zhangLi',age:18}
// obj.username = '123'
// obj.age = 21

// let obj2 = obj
// obj = {address:'北京'}
// console.log(obj);
// console.log(obj2);
